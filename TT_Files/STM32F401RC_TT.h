#ifndef TT_H
#define TT_H

/**
 * @file TT.h
 * @brief Header file for the Timing & Task (TT) module.
 *
 * This module provides a basic cooperative time-triggered scheduler.
 * It manages tasks based on a system tick generated by a hardware timer.
 *
 * MCU: STM32F401RC
 */

#include <stdint.h> // Required for standard integer types (uint32_t, etc.)
#include <stddef.h> // Required for NULL

/* --- Global Data Type Definitions (from TT_Rules.json) --- */
typedef uint32_t t_tick_time; /**< Unsigned integer representing milliseconds. Used for initial tick time. */
typedef uint8_t tbyte;        /**< Unsigned 8-bit integer for task indexes. */
typedef uint16_t tword;       /**< Unsigned 16-bit integer for time values (delay, period in ticks). */

/* --- Module Configuration --- */
#define TT_NUMBER_TASKS 10    /**< Maximum number of tasks the scheduler can manage. */
#define TT_MAX_DELAY    0xFFFF /**< Maximum allowed delay for a task (max value of tword). */

/* --- Register Addresses (from REGISTER_JSON) --- */

// RCC Registers
#define RCC_AHB1ENR_ADDR (0x40023830UL) /**< AHB1 peripheral clock enable register. */
#define RCC_AHB2ENR_ADDR (0x40023834UL) /**< AHB2 peripheral clock enable register. */
#define RCC_APB1ENR_ADDR (0x40023838UL) /**< APB1 peripheral clock enable register. */
#define RCC_APB2ENR_ADDR (0x4002383CUL) /**< APB2 peripheral clock enable register. */
#define RCC_CR_ADDR      (0x40023800UL) /**< Clock control register. */
#define RCC_CFGR_ADDR    (0x40023808UL) /**< Clock configuration register. */

// TIM2 Registers (chosen for scheduler tick)
#define TIM2_CR1_ADDR  (0x40000000UL) /**< TIM2 control register 1. */
#define TIM2_DIER_ADDR (0x4000000CUL) /**< TIM2 DMA/Interrupt enable register. */
#define TIM2_SR_ADDR   (0x40000010UL) /**< TIM2 status register. */
#define TIM2_CNT_ADDR  (0x40000024UL) /**< TIM2 counter. */
#define TIM2_PSC_ADDR  (0x40000028UL) /**< TIM2 prescaler. */
#define TIM2_ARR_ADDR  (0x4000002CUL) /**< TIM2 auto-reload register. */
#define TIM2_EGR_ADDR  (0x40000014UL) /**< TIM2 event generation register. */


/* --- Peripheral Register Pointers --- */

// RCC Pointers
#define RCC_AHB1ENR (*((volatile uint32_t *)RCC_AHB1ENR_ADDR))
#define RCC_AHB2ENR (*((volatile uint32_t *)RCC_AHB2ENR_ADDR))
#define RCC_APB1ENR (*((volatile uint32_t *)RCC_APB1ENR_ADDR))
#define RCC_APB2ENR (*((volatile uint32_t *)RCC_APB2ENR_ADDR))
#define RCC_CR      (*((volatile uint32_t *)RCC_CR_ADDR))
#define RCC_CFGR    (*((volatile uint32_t *)RCC_CFGR_ADDR))

// TIM2 Pointers
#define TIM2_CR1  (*((volatile uint32_t *)TIM2_CR1_ADDR))
#define TIM2_DIER (*((volatile uint32_t *)TIM2_DIER_ADDR))
#define TIM2_SR   (*((volatile uint32_t *)TIM2_SR_ADDR))
#define TIM2_CNT  (*((volatile uint32_t *)TIM2_CNT_ADDR))
#define TIM2_PSC  (*((volatile uint32_t *)TIM2_PSC_ADDR))
#define TIM2_ARR  (*((volatile uint32_t *)TIM2_ARR_ADDR))
#define TIM2_EGR  (*((volatile uint32_t *)TIM2_EGR_ADDR))


/* --- API Function Prototypes (from TT_API.json) --- */

/**
 * @brief Initializes the Timing & Task (TT) module.
 *
 * This function must be called once before any other TT API function.
 * It configures the system tick timer and clears all existing tasks.
 *
 * @param tick_time_ms The desired period of the scheduler tick in milliseconds.
 *                     Must be between 1ms and 1000ms.
 */
void TT_Init(t_tick_time tick_time_ms);

/**
 * @brief Starts the Timing & Task (TT) scheduler.
 *
 * This function enables the configured timer and its associated interrupt,
 * initiating the scheduler's operation. It should only be called once after TT_Init.
 */
void TT_Start(void);

/**
 * @brief Dispatches ready tasks for execution.
 *
 * This function scans the task list, executes tasks whose delay counters have
 * reached zero, and handles the removal of one-shot tasks. It should be called
 * repeatedly from the main application loop.
 */
void TT_Dispatch_task(void);

/**
 * @brief Timer Interrupt Service Routine for the TT module.
 *
 * This function must be called from the hardware timer's interrupt handler.
 * It decrements task delay counters and marks tasks as ready for execution.
 * Execution time must be minimized, and no blocking functions should be called.
 */
void TT_ISR(void);

/**
 * @brief Adds a new task to the scheduler.
 *
 * Registers a user-defined task function with a specified period and initial delay.
 * Task functions must be non-blocking.
 *
 * @param task Pointer to the task function to be executed.
 * @param period The period of the task in scheduler ticks (0 for one-shot task).
 * @param delay The initial delay before the task first runs, in scheduler ticks.
 * @return The index of the added task, or TT_NUMBER_TASKS if the task list is full.
 */
tbyte TT_Add_task(void (*task)(void), const tword period, const tword delay);

/**
 * @brief Deletes a task from the scheduler.
 *
 * Clears all information associated with the specified task index, effectively
 * removing it from the scheduler's active task list.
 *
 * @param task_index The index of the task to be deleted.
 */
void TT_Delete_task(const tbyte task_index);

#endif // TT_H