/**
 * @file main.h
 * @brief Main project header file for ATMEGA32 microcontroller.
 *        Includes core peripherals definitions, standard libraries,
 *        useful typedefs, common macros, and system safeguard initializations.
 * @author Technology Inovation Software Team
 * @device ATMEGA32
 * @creation date 2025-07-07
 * @standard MISRA C
 * @copyright ELARABY GROUP-TECHNOLOGY & INNOVATION CENTER-EMBEDDED SYSTEM GROUP
 */

#ifndef MAIN_H
#define MAIN_H

/* --- Include Directives --- */

/* MCU-specific include */
#include <avr/io.h>
#include <avr/interrupt.h> // For sei() and cli()
#include <avr/wdt.h>       // For watchdog control (wdt_disable)
#include <avr/builtins.h>  // For _NOP()

#include <assert.h>
#include <ctype.h>
#include <errno.h>
#include <float.h>
#include <inttypes.h>
#include <iso646.h>
#include <limits.h>
#include <math.h>
#include <setjmp.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* --- Useful Typedefs --- */

/**
 * @brief Standard 8-bit unsigned integer type.
 */
typedef uint8_t tbyte;

/**
 * @brief Standard 16-bit unsigned integer type.
 */
typedef uint16_t tword;

/**
 * @brief Standard 32-bit unsigned integer type.
 */
typedef uint32_t tlong;

/* --- Core Macros --- */

/**
 * @brief Sets a specific bit in a register.
 * @param reg The register to modify.
 * @param bit The bit position (0-7 for 8-bit registers).
 */
#define SET_BIT(reg, bit)      ((reg) |= (1U << (bit)))

/**
 * @brief Clears a specific bit in a register.
 * @param reg The register to modify.
 * @param bit The bit position (0-7 for 8-bit registers).
 */
#define CLR_BIT(reg, bit)      ((reg) &= ~(1U << (bit)))

/**
 * @brief Gets the value of a specific bit in a register.
 * @param reg The register to read from.
 * @param bit The bit position (0-7 for 8-bit registers).
 * @return The value of the bit (0 or 1).
 */
#define GET_BIT(reg, bit)      (((reg) >> (bit)) & 1U)

/**
 * @brief Toggles a specific bit in a register.
 * @param reg The register to modify.
 * @param bit The bit position (0-7 for 8-bit registers).
 */
#define TOG_BIT(reg, bit)      ((reg) ^= (1U << (bit)))

/**
 * @brief Disables global interrupts.
 *        Maps to the AVR-GCC cli() intrinsic.
 */
#define DI()                   cli()

/**
 * @brief Enables global interrupts.
 *        Maps to the AVR-GCC sei() intrinsic.
 */
#define EI()                   sei()

/**
 * @brief Executes a No Operation instruction.
 *        Maps to the AVR-GCC _NOP() intrinsic.
 */
#define NOP()                  _NOP()

/**
 * @brief Enters an infinite loop, effectively halting execution
 *        at this point.
 */
#define HALT()                 do { while(1); } while(0)


/* --- SAFEGUARD MACROS - FULLY IMPLEMENTED --- */

/**
 * @brief Configures all GPIO ports to a safe, default state:
 *        - All pins configured as inputs.
 *        - Output data registers cleared (results in low output if configured as output,
 *          or pull-up disabled if configured as input and pull-up enabled bit exists/is set).
 *        - All pull-up resistors disabled (by clearing PORTx while DDRx is 0).
 *        - Disables external interrupt sources (INT0, INT1, INT2) that can cause wake-up.
 *        Uses a do-while(0) block for safe macro expansion in control structures.
 */
#define GPIO_SAFEGUARD_Init()  \
    do { \
        /* Set all port data direction registers to input */ \
        DDRA = 0x00; \
        DDRB = 0x00; \
        DDRC = 0x00; \
        DDRD = 0x00; \
        \
        /* Set all port output registers to low (disables internal pull-ups when DDR is input) */ \
        PORTA = 0x00; \
        PORTB = 0x00; \
        PORTC = 0x00; \
        PORTD = 0x00; \
        \
        /* Disable external interrupt enables (INT0, INT1, INT2) in GICR */ \
        GICR &= ~((1 << INT0) | (1 << INT1) | (1 << INT2)); \
        \
        /* Set external interrupt trigger to low level (safest default) for INT0, INT1 in MCUCR */ \
        MCUCR &= ~((1 << ISC00) | (1 << ISC01) | (1 << ISC10) | (1 << ISC11)); \
        \
        /* Set external interrupt trigger to low level (safest default) for INT2 in MCUCSR */ \
        MCUCSR &= ~(1 << ISC2); \
        \
    } while(0)

/**
 * @brief Configures essential microcontroller registers to a safe, default state:
 *        - Disables global interrupts.
 *        - Disables all Timers (Timer0, Timer1, Timer2).
 *        - Disables PWM outputs generated by timers.
 *        - Disables Watchdog Timer (WDT).
 *        - Disables Input Capture Unit (ICU).
 *        - Disables Analog-to-Digital Converter (ADC).
 *        - Disables UART (USART) communication peripheral.
 *        - Disables I2C (TWI) communication peripheral.
 *        - Disables SPI communication peripheral.
 *        - Ensures GPIO pins are configured as general I/O, not special functions
 *          (implicitly achieved by disabling peripherals and setting DDR/PORT).
 *        Uses a do-while(0) block for safe macro expansion in control structures.
 *        NOTE: The Watchdog Timer disable sequence is time-critical (must complete
 *        within 4 cycles after WDCE is set). While implemented directly,
 *        using the wdt_disable() function from <avr/wdt.h> is often more robust
 *        as the compiler library guarantees timing. Using this macro might
 *        be sensitive to compiler optimizations affecting timing.
 */
#define Registers_SAFEGUARD_Init() \
    do { \
        /* Disable global interrupts (must be done before disabling peripherals if they can generate interrupts) */ \
        cli(); \
        \
        /* Disable Timer/Counter 0 */ \
        TCCR0 = 0x00; \
        \
        /* Disable Timer/Counter 1 */ \
        TCCR1A = 0x00; \
        TCCR1B = 0x00; \
        \
        /* Disable Timer/Counter 2 and any asynchronous mode settings */ \
        TCCR2 = 0x00; \
        ASSR = 0x00; \
        \
        /* Clear any pending Timer/Counter interrupt flags (optional but good practice) */ \
        TIFR = 0xFF; /* Clear all pending Timer flags (OCF0, TOV0, ICF1, OCF1A, OCF1B, TOV1, OCF2, TOV2) */ \
        \
        /* Disable Watchdog Timer (WDT) - TIMING CRITICAL SEQUENCE */ \
        /* Write logical one to WDE and WDCE */ \
        WDTCR = (1 << WDCE) | (1 << WDE); \
        /* Turn off WDT (clear WDE and WDCE) */ \
        WDTCR = 0x00; \
        \
        /* Disable ADC (Analog-to-Digital Converter) */ \
        ADCSRA = 0x00; /* Clears ADEN bit to disable ADC */ \
        ADMUX = 0x00;  /* Reset MUX and ADLAR bits */ \
        SFIOR &= ~((1 << ADTS2) | (1 << ADTS1) | (1 << ADTS0)); /* Disable ADC Auto Trigger Source */ \
        \
        /* Disable UART (USART) */ \
        UCSRB = 0x00; /* Clear RXEN and TXEN to disable receiver and transmitter */ \
        UCSRA = 0x00; /* Clear all flags and U2X bit */ \
        /* Accessing UCSRC requires URSEL bit to be high when writing. Clear other bits. */ \
        UCSRC = (1 << URSEL); /* Clear UMSEL, UPM, USBS, UCSZ, UCPOL */ \
        /* UBRRH should also have URSEL set when written, but clearing UBRRL/UBRRH is often unnecessary to disable. */ \
        \
        /* Disable I2C (Two-Wire Interface - TWI) */ \
        TWCR = 0x00; /* Clear TWEN bit to disable TWI */ \
        \
        /* Disable SPI (Serial Peripheral Interface) */ \
        SPCR = 0x00; /* Clear SPE bit to disable SPI */ \
        SPSR = 0x00; /* Clear SPIF and WCOL flags */ \
        \
        /* GPIO configuration (setting inputs, pull-ups, etc.) is handled by GPIO_SAFEGUARD_Init() */ \
        /* Disabling peripherals above ensures their alternative pin functions are inactive, */ \
        /* allowing the DDR/PORT settings (from GPIO_SAFEGUARD_Init) to control the pins. */ \
        \
    } while(0)


#endif /* MAIN_H */